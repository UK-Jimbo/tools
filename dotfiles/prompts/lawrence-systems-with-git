prompt_color='\[\033[;32m\]'
info_color='\[\033[1;34m\]'
prompt_symbol=ğŸ“›
if [ "$EUID" -eq 0 ]; then # Change prompt colors for root user
prompt_color='\[\033[;94m\]'
info_color='\[\033[1;31m\]'
prompt_symbol=ğŸ’€
fi

# # Function to display colored Git branch status
git_branch_status() {

    if git rev-parse --is-inside-work-tree &>/dev/null; then

        # Get the status of the Git repo (staged, modified, untracked)
        status=$(git status --short)

        # Check for staged, modified, and untracked files
        staged_count=$(git status --short | grep -c '^[AM]')  # Count staged changes
        modified_count=$(git status --short  | grep -c '^[^AM?]')  # Count modified, but not staged
        untracked_count=$(git status --short  | grep -c '^\?\?')  # Count untracked files

        # Hack. untacked_count appear to return total files, we use this to work around it
        untracked_count=$((untracked_count - modified_count - staged_count))

        # Determine color based on status
        if [ $untracked_count -gt 0 ]; then
            echo '\[\033[0;31m\]'  # Red for untracked files
        elif [ $staged_count -gt 0 ] || [ $modified_count -gt 0 ]; then
            echo '\[\033[0;33m\]'  # Yellow for staged or modified files
        else
            echo '\[\033[0;32m\]'  # Green for no changes
        fi
    fi
}

# Function to set the Git prompt dynamically
set_git_prompt() {
    # Determine the Git status color
    git_status_color=$(git_branch_status)

    ahead_prompt=""
    behind_prompt=""

    if git rev-parse --is-inside-work-tree &>/dev/null; then
        if git rev-parse --verify HEAD &>/dev/null; then
            # Check if the branch is ahead or behind
            ahead_behind=$(git rev-list --left-right --count origin/$(git rev-parse --abbrev-ref HEAD)...HEAD 2>/dev/null)

            if [ -n "$ahead_behind" ]; then
                # Capture ahead and behind values, default to 0 if unset
                read ahead behind <<< "$(echo "$ahead_behind" | awk '{print $1, $2}')"
                ahead=${ahead:-0}
                behind=${behind:-0}

                # Add ahead/behind info to the prompt
                if [ "$ahead" -eq 0 ] && [ "$behind" -eq 0 ]; then
                    ahead_prompt="up to date"
                fi
                if [ "$ahead" -gt 0 ]; then
                    ahead_prompt="â†‘$ahead"
                fi
                if [ "$behind" -gt 0 ]; then
                    behind_prompt="â†“$behind"
                fi
            else
                # Handle case where the branch has no upstream
                ahead_prompt="no upstream"
            fi
        else
            ahead_prompt="no commits"
        fi
    fi
    # Set the Git prompt using the current directory and Git status
    PS1="$prompt_colorâ”Œâ”€â”€${debian_chroot:+($debian_chroot)â”€â”€}($info_color\u${prompt_symbol}\h$prompt_color)-[\[\033[0;1m\]\w$prompt_color]$git_status_color$(__git_ps1 ' (%s) (origin $ahead_prompt$behind_prompt)')\n$prompt_colorâ””â”€$info_color\$\[\033[0m\] "
}

# Dynamically update the prompt with each new command
PROMPT_COMMAND=set_git_prompt
